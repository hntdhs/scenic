[{"/Users/mike/Desktop/scenic/src/index.js":"1","/Users/mike/Desktop/scenic/src/serviceWorker.js":"2","/Users/mike/Desktop/scenic/src/App.js":"3","/Users/mike/Desktop/scenic/src/routes-nav/Routes.js":"4","/Users/mike/Desktop/scenic/src/routes-nav/Navigation.js":"5","/Users/mike/Desktop/scenic/src/hooks/useLocalStorage.js":"6","/Users/mike/Desktop/scenic/src/common/ScrollToTop.js":"7","/Users/mike/Desktop/scenic/src/common/LoadingSpinner.js":"8","/Users/mike/Desktop/scenic/src/auth/UserContext.js":"9","/Users/mike/Desktop/scenic/src/api/api.js":"10","/Users/mike/Desktop/scenic/src/auth/LoginForm.js":"11","/Users/mike/Desktop/scenic/src/auth/SignupForm.js":"12","/Users/mike/Desktop/scenic/src/routes-nav/PrivateRoute.js":"13","/Users/mike/Desktop/scenic/src/common/NoSearchResults.js":"14","/Users/mike/Desktop/scenic/src/homepage/Homepage.js":"15","/Users/mike/Desktop/scenic/src/profiles/ProfileForm.js":"16","/Users/mike/Desktop/scenic/src/profiles/ProfilePage.js":"17","/Users/mike/Desktop/scenic/src/byways/StateMenu.js":"18","/Users/mike/Desktop/scenic/src/byways/StateDetail.js":"19","/Users/mike/Desktop/scenic/src/search/FilterSearch.js":"20","/Users/mike/Desktop/scenic/src/byways/BywayDetail.js":"21","/Users/mike/Desktop/scenic/src/byways/RandomByway.js":"22","/Users/mike/Desktop/scenic/src/search/DesignationExplanation.js":"23","/Users/mike/Desktop/scenic/src/common/Alert.js":"24","/Users/mike/Desktop/scenic/src/hooks/useTimedMessage.js":"25","/Users/mike/Desktop/scenic/src/byways/BywayCard.js":"26","/Users/mike/Desktop/scenic/src/common/LimitedTextArea.js":"27","/Users/mike/Desktop/scenic/src/search/SearchForm.js":"28","/Users/mike/Desktop/scenic/src/byways/StateCard.js":"29","/Users/mike/Desktop/scenic/src/common/Pagination.js":"30","/Users/mike/Desktop/scenic/src/search/DesignationSearch.js":"31","/Users/mike/Desktop/scenic/src/actions/CommentForm.js":"32","/Users/mike/Desktop/scenic/src/actions/FavoriteAByway.js":"33","/Users/mike/Desktop/scenic/src/search/Checkbox.js":"34","/Users/mike/Desktop/scenic/src/profiles/UsersList.js":"35","/Users/mike/Desktop/scenic/src/search/GeographicFeaturesSearch.js":"36"},{"size":452,"mtime":1685315688382,"results":"37","hashOfConfig":"38"},{"size":5239,"mtime":1675798356791,"results":"39","hashOfConfig":"38"},{"size":4126,"mtime":1688764298941,"results":"40","hashOfConfig":"38"},{"size":2985,"mtime":1688011644936,"results":"41","hashOfConfig":"38"},{"size":1875,"mtime":1688011355570,"results":"42","hashOfConfig":"38"},{"size":1010,"mtime":1675798246634,"results":"43","hashOfConfig":"38"},{"size":287,"mtime":1686278333325,"results":"44","hashOfConfig":"38"},{"size":275,"mtime":1675798273961,"results":"45","hashOfConfig":"38"},{"size":179,"mtime":1671672135052,"results":"46","hashOfConfig":"38"},{"size":3437,"mtime":1689281760264,"results":"47","hashOfConfig":"38"},{"size":3197,"mtime":1689969000993,"results":"48","hashOfConfig":"38"},{"size":3361,"mtime":1688171899965,"results":"49","hashOfConfig":"38"},{"size":824,"mtime":1681180658896,"results":"50","hashOfConfig":"38"},{"size":326,"mtime":1688765548384,"results":"51","hashOfConfig":"38"},{"size":1401,"mtime":1689197457885,"results":"52","hashOfConfig":"38"},{"size":5097,"mtime":1687882438581,"results":"53","hashOfConfig":"38"},{"size":5247,"mtime":1689199416744,"results":"54","hashOfConfig":"38"},{"size":1102,"mtime":1682975817993,"results":"55","hashOfConfig":"38"},{"size":3051,"mtime":1685250856704,"results":"56","hashOfConfig":"38"},{"size":3853,"mtime":1686526987318,"results":"57","hashOfConfig":"38"},{"size":6124,"mtime":1688181857998,"results":"58","hashOfConfig":"38"},{"size":1742,"mtime":1687466903532,"results":"59","hashOfConfig":"38"},{"size":1072,"mtime":1688796806344,"results":"60","hashOfConfig":"38"},{"size":519,"mtime":1675798273960,"results":"61","hashOfConfig":"38"},{"size":1440,"mtime":1675798250983,"results":"62","hashOfConfig":"38"},{"size":517,"mtime":1688438549117,"results":"63","hashOfConfig":"38"},{"size":1047,"mtime":1689878560489,"results":"64","hashOfConfig":"38"},{"size":4008,"mtime":1689193013473,"results":"65","hashOfConfig":"38"},{"size":301,"mtime":1682645150987,"results":"66","hashOfConfig":"38"},{"size":1024,"mtime":1687467047034,"results":"67","hashOfConfig":"38"},{"size":1298,"mtime":1689968091943,"results":"68","hashOfConfig":"38"},{"size":1344,"mtime":1686202845498,"results":"69","hashOfConfig":"38"},{"size":2105,"mtime":1686371413185,"results":"70","hashOfConfig":"38"},{"size":747,"mtime":1686189317907,"results":"71","hashOfConfig":"38"},{"size":746,"mtime":1688153553669,"results":"72","hashOfConfig":"38"},{"size":1541,"mtime":1689968032197,"results":"73","hashOfConfig":"38"},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},"1py9urj",{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"76"},{"filePath":"82","messages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"84","messages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"88","messages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"90","messages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"92","messages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"96","messages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"98","messages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"100","messages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"102","messages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"104","messages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"106","messages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"108","messages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"76"},{"filePath":"111","messages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"113","messages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"76"},{"filePath":"116","messages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"76"},{"filePath":"119","messages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"76"},{"filePath":"122","messages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"76"},{"filePath":"125","messages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"76"},{"filePath":"128","messages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"130","messages":"131","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"132","messages":"133","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"134","messages":"135","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"76"},{"filePath":"137","messages":"138","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"76"},{"filePath":"140","messages":"141","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"142","messages":"143","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"76"},{"filePath":"145","messages":"146","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"147","messages":"148","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"76"},{"filePath":"150","messages":"151","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"76"},{"filePath":"153","messages":"154","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"155","messages":"156","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"157","messages":"158","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/mike/Desktop/scenic/src/index.js",[],["159","160"],"/Users/mike/Desktop/scenic/src/serviceWorker.js",[],"/Users/mike/Desktop/scenic/src/App.js",["161","162"],"import React, { useState, useEffect } from \"react\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport useLocalStorage from \"./hooks/useLocalStorage\";\nimport Navigation from \"./routes-nav/Navigation\";\nimport Routes from \"./routes-nav/Routes\";\nimport LoadingSpinner from \"./common/LoadingSpinner\";\nimport BywayApi from \"./api/api\";\nimport UserContext from \"./auth/UserContext\";\nimport jwt from \"jsonwebtoken\";\nimport ScrollToTop from \"./common/ScrollToTop\";\nimport { ToastProvider } from 'react-toast-notifications';\n\n// Key name for storing token in localStorage for \"remember me\" re-login\nexport const TOKEN_STORAGE_ID = \"scenic-token\";\n\n/** Byways application.\n *\n * - infoLoaded: has user data been pulled from API?\n *   (this manages spinner for \"loading...\")\n *\n * - currentUser: user obj from API. This becomes the canonical way to tell\n *   if someone is logged in. This is passed around via context throughout app.\n *\n * - token: for logged in users, this is their authentication JWT.\n *   Is required to be set for most API calls. This is initially read from\n *   localStorage and synced to there via the useLocalStorage hook.\n *\n * App -> Routes\n */\n\n\nfunction App() {\n  const [infoLoaded, setInfoLoaded] = useState(false);\n  const [applicationIds, setApplicationIds] = useState(new Set([]));\n  const [currentUser, setCurrentUser] = useState(null);\n  const [token, setToken] = useLocalStorage(TOKEN_STORAGE_ID);\n\n  console.debug(\n      \"App\",\n      \"infoLoaded=\", infoLoaded,\n      \"currentUser=\", currentUser,\n      \"token=\", token,\n  );\n\n  // Load user info from API. Until a user is logged in and they have a token,\n  // this should not run. It only needs to re-run when a user logs out, so\n  // the value of the token is a dependency for this effect.\n\n  useEffect(function loadUserInfo() {\n    console.debug(\"App useEffect loadUserInfo\", \"token=\", token);\n\n    async function getCurrentUser() {\n      if (token) {\n        try {\n          let { username } = jwt.decode(token);\n          // put the token on the Api class so it can use it to call the API.\n          BywayApi.token = token;\n          let currentUser = await BywayApi.getCurrentUser(username);\n          setCurrentUser(currentUser);\n          \n        } catch (err) {\n          console.error(\"App loadUserInfo: problem loading\", err);\n          setCurrentUser(null);\n        }\n      }\n      setInfoLoaded(true);\n    }\n\n    // set infoLoaded to false while async getCurrentUser runs; once the\n    // data is fetched (or even if an error happens!), this will be set back\n    // to false to control the spinner.\n    setInfoLoaded(false);\n    getCurrentUser();\n  }, [token]);\n\n  /** Handles site-wide logout. */\n  function logout() {\n    setCurrentUser(null);\n    setToken(null);\n  }\n\n  /** Handles site-wide signup.\n   *\n   * Automatically logs them in (set token) upon signup.\n   *\n   * Make sure you await this function and check its return value!\n   */\n  async function signup(signupData) {\n    try {\n      let token = await BywayApi.signup(signupData);\n      setToken(token);\n      return { success: true };\n    } catch (errors) {\n      console.error(\"signup failed\", errors);\n      return { success: false, errors };\n    }\n  }\n\n  /** Handles site-wide login.\n   *\n   * Make sure you await this function and check its return value!\n   */\n  async function login(loginData) {\n    try {\n      let token = await BywayApi.login(loginData);\n      setToken(token);\n      return { success: true };\n    } catch (errors) {\n      console.error(\"login failed\", errors);\n      return { success: false, errors };\n    }\n  }\n\n  if (!infoLoaded) return <LoadingSpinner />;\n\n  return (\n      <BrowserRouter>\n        <ToastProvider>\n          <ScrollToTop>\n            <UserContext.Provider\n                value={{ currentUser, setCurrentUser }}>\n              <div className=\"App\">\n                <Navigation logout={logout} />\n                <Routes login={login} signup={signup} logout={logout}/>\n              </div>\n            </UserContext.Provider>\n          </ScrollToTop>\n        </ToastProvider>\n      </BrowserRouter>\n  );\n}\n\nexport default App;\n","/Users/mike/Desktop/scenic/src/routes-nav/Routes.js",[],"/Users/mike/Desktop/scenic/src/routes-nav/Navigation.js",[],"/Users/mike/Desktop/scenic/src/hooks/useLocalStorage.js",[],"/Users/mike/Desktop/scenic/src/common/ScrollToTop.js",[],"/Users/mike/Desktop/scenic/src/common/LoadingSpinner.js",[],"/Users/mike/Desktop/scenic/src/auth/UserContext.js",[],"/Users/mike/Desktop/scenic/src/api/api.js",[],"/Users/mike/Desktop/scenic/src/auth/LoginForm.js",["163"],"/Users/mike/Desktop/scenic/src/auth/SignupForm.js",[],"/Users/mike/Desktop/scenic/src/routes-nav/PrivateRoute.js",[],"/Users/mike/Desktop/scenic/src/common/NoSearchResults.js",[],"/Users/mike/Desktop/scenic/src/homepage/Homepage.js",[],"/Users/mike/Desktop/scenic/src/profiles/ProfileForm.js",[],"/Users/mike/Desktop/scenic/src/profiles/ProfilePage.js",["164","165","166","167","168","169"],"import React, { useState, useEffect, useContext } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport BywayApi from \"../api/api\";\nimport UserContext from \"../auth/UserContext\";\nimport { NavLink } from \"react-router-dom\";\nimport BywayCard from \"../byways/BywayCard\";\nimport { useToasts } from 'react-toast-notifications';\n// import { getUserFavorites } from \"../../backend/models/user\";\n\nfunction ShowUserProfile() {\n    const { username } = useParams();\n    const { addToast } = useToasts();\n    const { currentUser } = useContext(UserContext);\n    const [isMe, setIsMe] = useState(false)\n    const [profileInfo, setProfileInfo] = useState({});\n    const [userFavorites, setUserFavorites] = useState([]);\n    const [sortBy, setSortBy] = useState('name');\n    const [sortDirection, setSortDirection] = useState('asc');\n    const [formErrors, setFormErrors] = useState([]);\n\n    async function getUserFavorites() {\n        let userFavorites = await BywayApi.getUserFavorites(username, sortBy, sortDirection);\n        setUserFavorites(userFavorites);\n    }\n\n    useEffect(() => {  \n        async function getUserInfo() {\n            let errors = formErrors;\n            // attempted fix \n            try {\n                let profileInfo = await BywayApi.getCurrentUser(username);\n                setProfileInfo(profileInfo);\n                // if (errors) {\n                //     profileInfo.errors.forEach(i =>  addToast(i, { appearance: 'error' }));\n                // }    \n            } catch (errors) {\n                if (errors.length > 0) {\n                    addToast(errors[0], { appearance: 'error' });\n                }\n                setFormErrors(errors);\n            }\n        }\n        getUserInfo();\n    }, [username]);\n\n    useEffect(() => {\n        if (currentUser && profileInfo) {\n            setIsMe(currentUser.username === profileInfo.username);\n        }\n    }, [profileInfo, currentUser])   \n    \n    useEffect(() => {\n        // moved this to the top outside a useEffect to make it accessible to handleSubmitSortBy, but ended up not using it there, so could go back into this useEffect. don't think it matters if it's defined here or up top.\n        // async function getUserFavorites() {\n        //     let userFavorites = await BywayApi.getUserFavorites(username);\n        //     setUserFavorites(userFavorites);\n        // }\n        getUserFavorites();\n        \n    }, [sortBy, sortDirection])\n\n    // handleSubmit for removal button in map\n    // tell the function which byway is being removed by passing it into an anonymous function in the button's onClick below\n    async function handleSubmit(username, byway_id) {\n        await BywayApi.removeFavorite(username, byway_id);\n        getUserFavorites();\n    }\n\n    async function handleSubmitSortBy(sortField, direction) {\n        setSortBy(sortField)\n        setSortDirection(direction);\n        // sortField and direction get passed here from the onClick in JSX\n    }\n        \n    \n\n    return (\n        <div>\n            {isMe ? <NavLink to={`/profile/`}>Edit your profile</NavLink> : ''}\n            {isMe ? <h3>Welcome to the profile page of {profileInfo.username}</h3> : <h3>Welcome to the profile page of {username}</h3>}\n            <img src={profileInfo.profilePhoto} alt={\"profile photo\"} />\n            <h3>Location: {profileInfo.userLocation}</h3>\n            <h3>Favorite State to Travel To: {profileInfo.favoriteState}</h3>\n            <p>Bio: {profileInfo.bio}</p>\n            <h1>USER FAVORITES</h1>\n\n            <h4>Order favorites by:</h4>\n            {sortBy == 'name' && sortDirection == 'asc' ? \n            // these are the initial states for sortBy and sortDirection\n                (<button onClick={e => handleSubmitSortBy('name', 'desc')}>Z-A</button>) :\n                // button starts as Z-A because byways are initially A-Z, so if user wanted to reverse order from that, button should be the opposite of what's initally shown\n                (<button onClick={e => handleSubmitSortBy('name', 'asc')}>A-Z</button>)\n            }\n            <button onClick={e => handleSubmitSortBy('length', 'asc')}>Shortest to Longest</button>\n            <button onClick={e => handleSubmitSortBy('length', 'desc')}>Longest to Shortest</button>\n            <div>\n                    {userFavorites.map(f => (\n                        <div>\n                            <BywayCard\n                                key={f.name + f.state}\n                                name={f.name}\n                                image={f.image}\n                                designation={f.designation}\n                            />\n                            {isMe ? (\n                            <button onClick={() => handleSubmit(username, f.byway_id)}>\n                            Remove Favorite\n                            </button>) : <span></span> }\n                        </div>\n                    ))}\n                </div>\n        </div>\n    )\n    // currentUser wouldn't work right if someone is looking at a different user's profile?\n    // maybe instead of BywayApi.getCurrentUser(username), BywayApi.getProfileInfo(username from params?)\n    // need to create some profiles to have a better look\n}\n\nexport default ShowUserProfile;","/Users/mike/Desktop/scenic/src/byways/StateMenu.js",[],"/Users/mike/Desktop/scenic/src/byways/StateDetail.js",["170"],"import React, { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport BywayApi from \"../api/api\";\nimport BywayCard from \"./BywayCard\";\nimport LoadingSpinner from \"../common/LoadingSpinner\";\n\n\n\n// shows cards of each byway that's in the state\n// the issue is that i don't know how to do 'if byway is in this state, return it so it can be displayed on this page'. i don't see where in jobly it does 'if job is from this company return it so it can be displayed on company page.' (looks like it's in the models folder in the backend)\n// has to load all the byways that are in this state - thinking something like 'return byways where state = x’ -  but where does this go? somewhere in the backend i'm sure. should there be a getBywaysByState method in api? otherwise it's basically the same as CompanyList\n// checkout the routes folder in jobly backend, there's a lot in there i haven't done for scenic that needs doing that could be causing problems\n\n\n\nfunction StateDetail() {\n    const { name } = useParams();\n\n    const [stateByways, setStateByways] = useState([]);\n\n    useEffect(() => {\n        async function getStateDetail(name) {\n            let stateByways = await BywayApi.findBywaysByState(name);\n            setStateByways(stateByways);\n        }\n        getStateDetail(name);\n    }, [name]);\n\n    // if (stateByways.length === 0) return <LoadingSpinner />;\n    // if I just link to the same 404 page that byway detail links to then it won't say 'this state doesn't have any byways'\n\n    return (\n        <div>\n            {/* <h2>Check Out the Scenic Drives Available in {name}!</h2> */}\n            {/*  */}\n            {stateByways.length\n            // states.length > 0\n            ? (\n                <div>\n                    <h2>Check Out the Scenic Drives Available in {name}!</h2>\n                    {stateByways.map(s => (\n                        <BywayCard\n                            key={s.name}\n                            name={s.name}\n                            image={s.image}\n                            designation={s.designation}\n                        />\n                    ))}\n                </div>\n            ) : (\n                <h4>Sorry, {name} has no byways.</h4>\n            )}\n        </div>\n    )\n}\n\nexport default StateDetail;\n\n\n\n\n// this should be byway information, not state 0 look at CompanyDetail\n// export default function (props) {\n//     let { state } = useParams();\n//     const routeParams = useParams();\n//     console.log('state', routeParams);\n//     const [stateData, setStateData] = useState({})\n//     useEffect(() => {\n//         // stateData = BywayApi.getState\n//         // setStateData(stateData)\n//         setStateData(BywayApi.getState(routeParams.name).then(e => {\n//             console.log(e)\n//         }))\n\n//     }, [routeParams?.name])\n//     // why the question mark?\n    \n//     // if (routeParams?.name) {\n//     //     return <div>{routeParams.name}</div>;\n//     // } else {\n//     //     return <span></span>;\n//     // }\n\n\n// }","/Users/mike/Desktop/scenic/src/search/FilterSearch.js",["171"],"\nimport React, { useState, useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport BywayApi from \"../api/api\";\nimport SearchForm from \"./SearchForm\";\nimport BywayCard from \"../byways/BywayCard\";\nimport Pagination from \"../common/Pagination\";\nimport { useToasts } from 'react-toast-notifications';\n\n// search via filters, go to browse by state, go to display and search users\n\nfunction FilterSearch() {\n    const { addToast } = useToasts();\n    const [byways, setByways] = useState([]);\n    const [errors, setErrors] = useState([]);\n    const [currentByWays, setCurrentByWays] = useState([]);\n    const [currentPage, setCurrentPage] = useState(1);\n    const [bywaysPerPage] = useState(10);\n    \n    const [nPages, setNPages] = useState(0); \n\n    const history = useHistory();\n    \n    useEffect(() => {\n        setNPages(Math.ceil(byways.length / bywaysPerPage))\n        const indexOfLastByway = currentPage * bywaysPerPage;\n        const indexOfFirstByway = indexOfLastByway - bywaysPerPage;\n        const currentByways = byways.slice(indexOfFirstByway, indexOfLastByway)\n        setCurrentByWays(currentByways)\n\n    }, [byways, currentPage])\n    // every time currentPage changes, the useEffect runs\n\n    useEffect(() => {\n        async function getBywaysForDisplay() {\n            let byways = await BywayApi.getAllByways();\n            setByways(byways);\n        }\n        getBywaysForDisplay();\n    }, []);\n    // display error to user - try/catch?\n\n    async function filterByways(filters) {\n        try {\n            debugger\n            let byways = await BywayApi.search(filters);\n            setByways(byways);\n            if (!byways.length) {\n                history.push(\"/noresults\");\n            }\n        } catch (errors) {\n            if (errors.length > 0) {\n                addToast(errors[0], { appearance: 'error' });\n                // can add error messaging/alerts with Toast before anything is sent to the back, like so:\n                //addToast(\"your search term must be more than 3 characters\", { appearance: 'error' });\n            }\n            setErrors(errors);\n        }\n    }\n\n    async function search(name) {\n        let byways = await BywayApi.search({name});\n        setByways(byways);\n        if (!byways.length) {\n            history.push(\"/noresults\");\n            // Alert type=\"success\" messages={[\"Updated successfully.\"]} \n        }\n    }\n\n    return (\n        <div>\n            <div>\n                <SearchForm searchFor={search} filterByways={filterByways} errors={errors} />\n                {/* search and filterByways are defined here, passing them over to SearchForm to make them useable there; don't actually know if errors is necessary to pass, didn't end up using it */}\n            </div>\n            <div>\n                {currentByWays.length > 0\n                ? (\n                    <div>\n                        <div>\n                            {currentByWays.map(s => (\n                                <BywayCard\n                                    key={s.name + s.state}\n                                    name={s.name}\n                                    image={s.image}\n                                    designation={s.designation}\n                                />\n                            ))}\n                        </div>\n                        <div>\n                            <Pagination\n                                nPages={nPages}\n                                currentPage={currentPage}\n                                setCurrentPage={setCurrentPage}\n                            />\n                        </div>\n                        \n                    </div>\n                ) : (\n                    <h4>no byways in system.</h4>\n                )}\n            </div>\n        </div>\n        \n    );\n}\n\nexport default FilterSearch;\n\n\n","/Users/mike/Desktop/scenic/src/byways/BywayDetail.js",["172"],"import React, { useState, useEffect, useContext } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport BywayApi from \"../api/api\";\nimport CommentForm from \"../actions/CommentForm\";\nimport FavoriteAByway from \"../actions/FavoriteAByway\";\nimport UserContext from \"../auth/UserContext\";\nimport moment from 'moment';\n// see Moment docs on display for how to format comment dates/times in different ways\nimport { useToasts } from 'react-toast-notifications';\n\n\nfunction BywayDetail() {\n    const { name } = useParams();\n    const { currentUser } = useContext(UserContext);\n    const { addToast } = useToasts();\n    const [byway, setByway] = useState(null);\n    const [comments, setComments] = useState([]);\n    const [isFavorite, setIsFavorite] = useState(false);\n\n\n    useEffect(() => {        \n        async function getByway(name) {\n            try {\n                const b = await BywayApi.getByway(name)\n                setByway(b);\n                const c = await BywayApi.getCommentsByByway(b.id);\n                setComments(c);\n                const favorites = await BywayApi.getUserFavorites(currentUser.username, \"name\", \"asc\");\n\n                if (favorites.find(i => i.byway_id === b.id)) {\n                    setIsFavorite(true);\n                } \n        } catch (errors) {\n            if (errors.length > 0) {\n                addToast(errors[0], { appearance: 'error' });\n            }\n            }\n        }    \n\n        getByway(name);\n    }, [name]);\n\n\n    // empty array makes it only happen first time\n\n    const addComment = (comment) => {\n        const updatedComments = [...comments, comment]\n        setComments(updatedComments);\n    }\n\n    function checkGeoFeaturesLength(byway) {\n        let tempString = byway.geographicFeatures\n        tempString = tempString[0].toUpperCase() + tempString.slice(1)\n        const splitted = tempString.split(',')\n        if (splitted.length >= 3) {\n            // if byway has 3 or more - features = Feature, feature and feature\n            // return byway.geographicFeatures.charAt(0).toUpperCase() + byway.geographicFeatures.replace(/(\"[^\"]+\"|\\w+)$/, \"and $1\").slice(1);\n            const comma_separated_list_until_last_element = splitted.slice(0, splitted.length - 1).join(', ')\n            // takes the splitted string, slices it from beginning up until the last element and joins them on comma, but there won't be a comma after the last feature, meaning we can add the last feature from splitted and return it at the end of this below with 'and' in front of it but no comma\n            return comma_separated_list_until_last_element + ' and ' + splitted[splitted.length - 1]\n            //return byway.geographicFeatures.charAt(0).toUpperCase() + byway.geographicFeatures.slice(1, lastIndex) + ' and' + byway.geographicFeatures(lastIndex + 1);\n        } else if (splitted.length === 2) {\n            // if byway has 2 - features = Feature and feature\n            // this replaced the comma with regex - return byway.geographicFeatures.charAt(0).toUpperCase() + byway.geographicFeatures.replace(/(\"[^\"]+\"|\\w+)$/, \"and $1\").slice(1);\n            const newString = splitted[0] + ' and' + splitted[1]\n            return newString.charAt(0).toUpperCase() + newString.slice(1)\n        } else if (splitted.length === 1) {\n            // if byway has 1 - features = Feature\n            // byway with one feature (charles street) showed 'no features verified'\n            // after adding the .length to byway.geoFeatures charles street shows '3 or more'\n            return splitted[0]\n        } else {\n            // if byway has none - 'No geographic features have been verified for this byway'\n            // byway with no features (hallowed ground) showed 'no features verified', maybe just because things are falling down to this part of the function\n            // after adding the .length to byway.geoFeatures this shows 'no features verified'\n            return \"No geographic features have been verified for this byway.\";\n\n        }\n        \n    }\n\n    return (\n        <div>\n            {byway\n                ? (\n                    <div>\n                        <h1>{byway.name}</h1>\n                        <img src={byway.image} alt={byway.name}></img>\n                        <h2>{byway.state}</h2>\n                        <h3>{byway.length} miles / { Math.round((parseFloat(byway.length) * 1.60934)) } kilometres</h3>\n                        <p><b>Fees:</b> {byway.fees}</p>\n                        {<p><b>Wondering what kind of natural settings you'll see on this byway?</b> {checkGeoFeaturesLength(byway)}.</p> }\n                        <p><b>About {byway.name}</b><br></br>{byway.description}</p>\n                        {isFavorite === true\n                        ? (\n                            <h4>Byway is in your favorites</h4>\n                        ) : (\n                            <FavoriteAByway id={byway.id} />\n                        )\n                        }\n                        <h4>Comment on {byway.name}</h4>\n                        <CommentForm name={byway.name} id={byway.id} onAdd={addComment}/>\n                        <div>\n                            {comments\n                            ? (\n                                <div>\n                                    {comments.map((c, i) => (\n                                        <div key={i}>\n                                            <h4>User <a href={`/profile/${c.username}`}>{c.username}</a> said this at {moment(c.create_at).format(\"MM/DD/YYYY hh:mm a\")}:</h4>\n                                            <p>{c.comment}</p>\n                                        </div>\n                                    ))}\n                                </div>\n                            ) : (\n                                <p>no one has commented</p>\n                            )\n                            }\n                        </div>\n\n                    </div>\n                    \n                ) : (\n                    <h1>no byway by that name</h1>\n                )\n            }\n        </div>\n    )\n}\n\nexport default BywayDetail;","/Users/mike/Desktop/scenic/src/byways/RandomByway.js",["173"],"import React, { useState, useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { Link } from \"react-router-dom\";\nimport BywayApi from \"../api/api\";\n\nfunction DisplayRandomByway() {\n    const history = useHistory();\n    const [byway, setByway] = useState(null);\n    \n    async function findOne() {\n        let byway = await BywayApi.getRandomByway();\n        setByway(byway);\n    }\n    // moved findOne function out of the useEffect so it's accessible to both the useEffect and handleSubmit\n\n    useEffect(() => {\n\n        findOne();\n    }, [])\n\n    function handleSubmit(evt) {\n        findOne();\n    }\n\n     function truncateCharCount(byway) {\n            if (byway.description.length > 500) {\n                return byway.description.slice(0,499) + \"... (continued on byway's page)\"\n            } else {\n                return byway.description;\n            }\n        }\n\n    return (\n        <div>\n            {byway\n                ? (\n                   <div> \n                    <h1>Check out {byway.name} in {byway.state}!</h1>\n                    <img src={byway.image} alt={byway.name}></img>\n                    <p>{truncateCharCount(byway)}</p>\n                    <Link to={`/byways/${byway.name}`}>Go to this byway's page to learn more, comment, and favorite {byway.name}.</Link>\n                    <br></br><button onClick={handleSubmit}>\n                        Try another byway\n                    </button>\n                    </div>\n                ) : (\n\n                    <p>the code don't work</p>\n                )\n                // pass in large amount of text and be sure it's not longer than 500\n                \n            }\n        </div>\n    )\n}\n\nexport default DisplayRandomByway;","/Users/mike/Desktop/scenic/src/search/DesignationExplanation.js",["174"],"import React from \"react\";\nimport DesignationSearch from \"./DesignationSearch\";\n\nfunction DesignationExplanation() {\n\n    return (\n        <div>\n            <p>To be designated as a National Scenic Byway, a byway must meet the criteria for at least one of six \"intrinsic qualities\": archeological, cultural, historic, natural, recreational, and scenic. The features contributing to the distinctive characteristics of the corridor’s intrinsic quality are recognized throughout the region and are considered regionally significant.</p><br></br>\n            <p>To be designated as an All-American Road, a byway must meet criteria for at least two intrinsic qualities that are nationally significant and have one-of-a-kind features that do not exist elsewhere. The road or highway must also be considered a \"destination unto itself.\" That is, the road must provide an exceptional traveling experience so recognized by travelers that they would make a drive along the highway a primary reason for their trip.</p>\n        </div>\n    )\n}\n\nexport default DesignationExplanation;","/Users/mike/Desktop/scenic/src/common/Alert.js",[],"/Users/mike/Desktop/scenic/src/hooks/useTimedMessage.js",[],"/Users/mike/Desktop/scenic/src/byways/BywayCard.js",[],"/Users/mike/Desktop/scenic/src/common/LimitedTextArea.js",["175","176"],"import React, { useState, useCallback, useEffect } from \"react\";\n\n\nconst LimitedTextArea = ({ value, limit, onChange }) => {\n  const [content, setContent] = useState(\"\");\n\n  const setFormattedContent = useCallback(\n    text => {\n      // const limitedContent = text.slice(0, limit)\n      const limitedContent = text.slice(0, limit)\n      setContent(limitedContent);\n      onChange(limitedContent);\n    },\n    [limit, setContent ]\n  );\n  // useCallback is used to isolate resource intensive functions so that they won't automatically run on every render; it only runs when one of its dependencies update - I thought useEffects run every time one of its dependencies updates? What's the difference?\n\n  useEffect(() => {\n    setFormattedContent(value)\n  }, [value])\n\n  return (\n    <div>\n      <textarea\n        onChange={event => setFormattedContent(event.target.value)}\n        value={content}\n      />\n      <p>\n        Maximum length: {limit}<br></br>\n        {content.length}/{limit}\n      </p>\n    </div>\n  );\n}\n\nexport default LimitedTextArea;","/Users/mike/Desktop/scenic/src/search/SearchForm.js",["177"],"import React, { useState } from \"react\";\nimport FilterSearch from \"./FilterSearch\";\n// import \"./SearchForm.css\";\nimport GeographicFeaturesSearch from \"./GeographicFeaturesSearch\";\nimport DesignationSearch from \"./DesignationSearch\";\n\n/** Search widget.\n *\n * This component doesn't *do* the searching, but it renders the search\n * form and calls the `searchFor` function prop that runs in a parent to do the\n * searching.\n *\n * { CompanyList, JobList } -> SearchForm\n */\n\nfunction SearchForm({ searchFor, filterByways }) {\n  // searchFor and filterByways are defined in FilterSearch (searchFor as search); when that component calls this one, those become useable here\n  console.debug(\"SearchForm\", \"searchFor=\", typeof searchFor);\n\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [minLength, setMinLength] = useState(0);\n  const [maxLength, setMaxLength] = useState(\"\");\n  const [geoFeaturesSelect, setGeoFeaturesSelect] = useState({});\n  const [designationSearch, setDesignationSearch] = useState({});\n  // added the geoFeaturesSelect useState, setGeoFeaturesSelect gets set in the onChange in GeographicFeaturesSearch (passed in when that component is called in the JSX below in this component)\n\n\n  /** Tell parent to filter */\n  function handleSubmit(evt) {\n    // take care of accidentally trying to search for just spaces\n    evt.preventDefault();\n    searchFor(searchTerm.trim() || undefined);\n    setSearchTerm('');\n  }\n\n  function handleSubmitFilter(e) {\n    e.preventDefault();\n    filterByways({minLength, maxLength, geoFeaturesSelect, designationSearch})\n\n  }\n  // handles submit for searches involving filters, i.e. not searching by name. sends filters for search over to FilterSearch, which is where filterByways is defined\n  // e comes from the onChange in min and max length's onChange; different from other filters because it's a value the user is typing in rather than a checkbox\n\n  /** Update form fields */\n  function handleChange(evt) {\n    setSearchTerm(evt.target.value);\n  }\n\n  return (\n      <div>\n        <div className=\"all-searches\">\n          <form className=\"byway-name-search\" onSubmit={handleSubmit}>\n            <p>Search byways by name</p>\n            <label htmlFor=\"searchTerm\">Byway Name:</label>\n            <input\n                name=\"searchTerm\"\n                // through the handleSubmit and its searchFor, the input's name makes it over to the search function in FilterSearch\n                placeholder=\"Enter search term..\"\n                onChange={handleChange}\n                value={searchTerm}\n            />\n            <button type=\"submit\">\n              Submit\n            </button>\n          </form>\n        </div>\n        <div className=\"not-name-searches\">\n          <form onSubmit={handleSubmitFilter}>\n            <p>Search byways by length. The longest of America's Byways&reg; is the Alaska Marine Highway at 3500 miles!</p>\n            <label htmlFor=\"minLength\">Minimum Byway Length:</label>\n            <input\n                name=\"minLength\"\n                placeholder=\"how many miles?\"\n                value={minLength}\n                onChange={e => setMinLength(e.target.value)}\n            />\n            <label htmlFor=\"maxLength\">Maximum Byway Length:</label>\n            <input\n                name=\"maxLength\"\n                placeholder=\"how many miles?\"\n                value={maxLength}\n                onChange={e => setMaxLength(e.target.value)}\n            />\n            <p>Search byways by geographic features. You'll see byways that contain all entered criteria.</p>\n            <GeographicFeaturesSearch \n              onChange={setGeoFeaturesSelect}\n              value={geoFeaturesSelect}\n            />\n            <DesignationSearch \n              onChange={setDesignationSearch}\n              value={designationSearch}\n            />\n            \n            <button type=\"submit\">\n              Submit\n            </button>\n          </form>\n        </div>\n      </div>\n  );\n}\n\nexport default SearchForm;\n","/Users/mike/Desktop/scenic/src/byways/StateCard.js",[],"/Users/mike/Desktop/scenic/src/common/Pagination.js",["178","179","180"],"import React from 'react';\n\nconst Pagination = ({ nPages, currentPage, setCurrentPage }) => {\n\n    const pageNumbers = [...Array(nPages + 1).keys()].slice(1);\n\n    const nextPage = () => {\n            if(currentPage !== nPages) setCurrentPage(currentPage + 1)\n    };\n    const prevPage = () => {\n        if(currentPage !== 1) setCurrentPage(currentPage - 1)\n    };\n    return (\n        <nav>\n            <ul>\n                <li>\n                    <a onClick={prevPage} href='#'>Previous</a>\n                </li>\n                {pageNumbers.map(pgNumber => (\n                    <li key={pgNumber}>\n                    <a onClick={() => setCurrentPage(pgNumber)} href='#'>{pgNumber}</a>\n                    </li>\n                ))}\n                <li>\n                    <a onClick={nextPage} href='#'>Next</a>\n                </li>\n            </ul>\n        </nav>\n    )\n    // check right number of pages and that next button appears where it should and doesn't appear when it shouldn't\n}\n\nexport default Pagination","/Users/mike/Desktop/scenic/src/search/DesignationSearch.js",["181"],"/Users/mike/Desktop/scenic/src/actions/CommentForm.js",["182","183","184"],"import React, { useState, useContext } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport BywayApi from \"../api/api\";\nimport LoadingSpinner from \"../common/LoadingSpinner\"; \nimport UserContext from \"../auth/UserContext\";\nimport LimitedTextArea from \"../common/LimitedTextArea\";\n\n// don't forget link to edit, plus a ternary operator that displays a 'you haven't created a profile' message if there's nothing to display - was I going to make a table for profile data as opposed to user data?\n// call api for user info, should be same as jobly\n\nfunction CommentForm({id, onAdd}) {\n    const { byway } = useParams();\n    // byway I think since that's what's in the URL\n    const { currentUser } = useContext(UserContext);\n\n    const [comment, setComment] = useState(\"\");\n\n    async function handleSubmit(evt) {\n        const response = await BywayApi.makeComment(id, comment);\n        // setComment('');\n        setComment('');\n        onAdd(response)\n        // getCommentsByByway(byway);\n    }\n\n    return (\n        <div>\n            {/* <textarea onChange={e => setComment(e.target.value)} ></textarea> */}\n            <LimitedTextArea value={comment} limit={500} onChange={setComment}/>\n            <button onClick={handleSubmit}>\n                Submit\n            </button>\n        </div>\n    )\n}\n\nexport default CommentForm;","/Users/mike/Desktop/scenic/src/actions/FavoriteAByway.js",["185","186","187"],"import React, { useState, useContext } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport BywayApi from \"../api/api\";\nimport LoadingSpinner from \"../common/LoadingSpinner\";\nimport UserContext from \"../auth/UserContext\";\nimport Alert from \"../common/Alert\";\n\nfunction FavoriteAByway({id}) {\n    const { byway } = useParams();\n    const { currentUser } = useContext(UserContext);\n\n    // const [favorite, setFavorite] = useState(false);\n    // might need state for changing status on page from something that can be favorited to something that has been favorited - parkFavorited, setParkFavorited\n\n    const [favorite, setFavorite] = useState();\n    const [hasBeenSet, setHasBeenSet] = useState(false);\n\n    // useEffect(() => {  \n    //     async function favorite(currentUser, byway) {\n    //         await BywayApi.favoriteAByway(byway);\n    //         setFavorite(true);\n\n    //     }\n    //     favorite(currentUser, byway);\n    // }, []);\n\n    async function handleSubmit(evt) {\n        await BywayApi.favoriteAByway(currentUser.username, id);\n        setFavorite(id);\n        setHasBeenSet(true);\n        // set state variable to true\n    }\n\n//     return (\n//         <div>\n//             <div>\n//                 {/* {setFavorite(id)\n//                     ?\n//                     <Alert messages={[\"Byway added to your favorites.\"]} />\n//                     :  */}\n//                     {/* try in onSubmit? with a state variable that sets whether or not the byway has been favorited */}\n//                     <button onClick={handleSubmit}>\n//                         Add this byway to your favorites\n//                     </button>\n//             </div>\n//         </div>\n//     )\n// }\n\n        return (\n            <div>\n                {hasBeenSet\n                ? (\n                <Alert messages={[\"Byway added to your favorites.\"]} />\n                 ) : (\n                <button onClick={handleSubmit}>\n                    Add this byway to your favorites\n                </button>\n                 )}\n            </div>\n        )\n}\n\nexport default FavoriteAByway;","/Users/mike/Desktop/scenic/src/search/Checkbox.js",[],"/Users/mike/Desktop/scenic/src/profiles/UsersList.js",[],"/Users/mike/Desktop/scenic/src/search/GeographicFeaturesSearch.js",["188"],{"ruleId":"189","replacedBy":"190"},{"ruleId":"191","replacedBy":"192"},{"ruleId":"193","severity":1,"message":"194","line":34,"column":10,"nodeType":"195","messageId":"196","endLine":34,"endColumn":24},{"ruleId":"193","severity":1,"message":"197","line":34,"column":26,"nodeType":"195","messageId":"196","endLine":34,"endColumn":43},{"ruleId":"193","severity":1,"message":"198","line":4,"column":10,"nodeType":"195","messageId":"196","endLine":4,"endColumn":23},{"ruleId":"193","severity":1,"message":"199","line":28,"column":17,"nodeType":"195","messageId":"196","endLine":28,"endColumn":23},{"ruleId":"200","severity":1,"message":"201","line":44,"column":8,"nodeType":"202","endLine":44,"endColumn":18,"suggestions":"203"},{"ruleId":"200","severity":1,"message":"204","line":60,"column":8,"nodeType":"202","endLine":60,"endColumn":31,"suggestions":"205"},{"ruleId":"206","severity":1,"message":"207","line":81,"column":13,"nodeType":"208","endLine":81,"endColumn":73},{"ruleId":"209","severity":1,"message":"210","line":88,"column":21,"nodeType":"211","messageId":"212","endLine":88,"endColumn":23},{"ruleId":"209","severity":1,"message":"210","line":88,"column":48,"nodeType":"211","messageId":"212","endLine":88,"endColumn":50},{"ruleId":"193","severity":1,"message":"213","line":5,"column":8,"nodeType":"195","messageId":"196","endLine":5,"endColumn":22},{"ruleId":"200","severity":1,"message":"214","line":31,"column":8,"nodeType":"202","endLine":31,"endColumn":29,"suggestions":"215"},{"ruleId":"200","severity":1,"message":"216","line":41,"column":8,"nodeType":"202","endLine":41,"endColumn":14,"suggestions":"217"},{"ruleId":"193","severity":1,"message":"218","line":7,"column":11,"nodeType":"195","messageId":"196","endLine":7,"endColumn":18},{"ruleId":"193","severity":1,"message":"219","line":2,"column":8,"nodeType":"195","messageId":"196","endLine":2,"endColumn":25},{"ruleId":"200","severity":1,"message":"220","line":14,"column":5,"nodeType":"202","endLine":14,"endColumn":25,"suggestions":"221"},{"ruleId":"200","severity":1,"message":"222","line":20,"column":6,"nodeType":"202","endLine":20,"endColumn":13,"suggestions":"223"},{"ruleId":"193","severity":1,"message":"224","line":2,"column":8,"nodeType":"195","messageId":"196","endLine":2,"endColumn":20},{"ruleId":"225","severity":1,"message":"226","line":17,"column":21,"nodeType":"208","endLine":17,"endColumn":52},{"ruleId":"225","severity":1,"message":"226","line":21,"column":21,"nodeType":"208","endLine":21,"endColumn":74},{"ruleId":"225","severity":1,"message":"226","line":25,"column":21,"nodeType":"208","endLine":25,"endColumn":52},{"ruleId":"200","severity":1,"message":"227","line":10,"column":8,"nodeType":"202","endLine":10,"endColumn":18,"suggestions":"228"},{"ruleId":"193","severity":1,"message":"213","line":4,"column":8,"nodeType":"195","messageId":"196","endLine":4,"endColumn":22},{"ruleId":"193","severity":1,"message":"229","line":12,"column":13,"nodeType":"195","messageId":"196","endLine":12,"endColumn":18},{"ruleId":"193","severity":1,"message":"230","line":14,"column":13,"nodeType":"195","messageId":"196","endLine":14,"endColumn":24},{"ruleId":"193","severity":1,"message":"213","line":4,"column":8,"nodeType":"195","messageId":"196","endLine":4,"endColumn":22},{"ruleId":"193","severity":1,"message":"229","line":9,"column":13,"nodeType":"195","messageId":"196","endLine":9,"endColumn":18},{"ruleId":"193","severity":1,"message":"231","line":15,"column":12,"nodeType":"195","messageId":"196","endLine":15,"endColumn":20},{"ruleId":"200","severity":1,"message":"227","line":11,"column":8,"nodeType":"202","endLine":11,"endColumn":18,"suggestions":"232"},"no-native-reassign",["233"],"no-negated-in-lhs",["234"],"no-unused-vars","'applicationIds' is assigned a value but never used.","Identifier","unusedVar","'setApplicationIds' is assigned a value but never used.","'ToastProvider' is defined but never used.","'errors' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'addToast' and 'formErrors'. Either include them or remove the dependency array.","ArrayExpression",["235"],"React Hook useEffect has a missing dependency: 'getUserFavorites'. Either include it or remove the dependency array.",["236"],"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'LoadingSpinner' is defined but never used.","React Hook useEffect has a missing dependency: 'bywaysPerPage'. Either include it or remove the dependency array.",["237"],"React Hook useEffect has missing dependencies: 'addToast' and 'currentUser.username'. Either include them or remove the dependency array.",["238"],"'history' is assigned a value but never used.","'DesignationSearch' is defined but never used.","React Hook useCallback has a missing dependency: 'onChange'. Either include it or remove the dependency array. If 'onChange' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["239"],"React Hook useEffect has a missing dependency: 'setFormattedContent'. Either include it or remove the dependency array.",["240"],"'FilterSearch' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","React Hook useEffect has a missing dependency: 'onChange'. Either include it or remove the dependency array. If 'onChange' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["241"],"'byway' is assigned a value but never used.","'currentUser' is assigned a value but never used.","'favorite' is assigned a value but never used.",["242"],"no-global-assign","no-unsafe-negation",{"desc":"243","fix":"244"},{"desc":"245","fix":"246"},{"desc":"247","fix":"248"},{"desc":"249","fix":"250"},{"desc":"251","fix":"252"},{"desc":"253","fix":"254"},{"desc":"255","fix":"256"},{"desc":"255","fix":"257"},"Update the dependencies array to be: [addToast, formErrors, username]",{"range":"258","text":"259"},"Update the dependencies array to be: [getUserFavorites, sortBy, sortDirection]",{"range":"260","text":"261"},"Update the dependencies array to be: [byways, bywaysPerPage, currentPage]",{"range":"262","text":"263"},"Update the dependencies array to be: [addToast, currentUser.username, name]",{"range":"264","text":"265"},"Update the dependencies array to be: [limit, onChange]",{"range":"266","text":"267"},"Update the dependencies array to be: [setFormattedContent, value]",{"range":"268","text":"269"},"Update the dependencies array to be: [onChange, selected]",{"range":"270","text":"271"},{"range":"272","text":"271"},[1740,1750],"[addToast, formErrors, username]",[2415,2438],"[getUserFavorites, sortBy, sortDirection]",[1144,1165],"[byways, bywaysPerPage, currentPage]",[1476,1482],"[addToast, currentUser.username, name]",[409,429],"[limit, onChange]",[754,761],"[setFormattedContent, value]",[309,319],"[onChange, selected]",[543,553]]