{"ast":null,"code":"import _slicedToArray from\"/Users/mike/Desktop/scenic/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import{useRef,useState,useEffect}from\"react\";/** Custom hook for managing \"flash\" messages.\n *\n * This adds an item in state, `active`, which can be controlled by the\n * component as desired. The component would typically `setActive(true)`\n * to start displaying the message, and after `timeInMsec`, active would\n * go back to false, which would typically stop showing the message.\n *\n * In the component::\n *\n *   const [myMsgFlag, setMyMsgFlag] = useTimedMessage();\n *\n *   function somethingDidntWork() {\n *     setMsgFlag(true);\n *   }\n *\n *   return (\n *     {myMsgFlag ? <p>Oh No!</p> : null}\n *   )\n *\n * While this hook was written for showing flash messages, it's really just\n * a hook for timed state clearing -- this same pattern could be useful for\n * other tasks.\n *\n */function useTimedMessage(){var timeInMsec=arguments.length>0&&arguments[0]!==undefined?arguments[0]:3000;var _useState=useState(false),_useState2=_slicedToArray(_useState,2),active=_useState2[0],setActive=_useState2[1];var messageShownRef=useRef(false);useEffect(function showSavedMessage(){console.debug(\"useTimedMessage useEffect showSavedMessage\",\"active=\",active);if(active&&!messageShownRef.current){messageShownRef.current=true;setTimeout(function removeMessage(){setActive(false);messageShownRef.current=false;},timeInMsec);}},[active,timeInMsec]);return[active,setActive];}export default useTimedMessage;","map":{"version":3,"names":["useRef","useState","useEffect","useTimedMessage","timeInMsec","active","setActive","messageShownRef","showSavedMessage","console","debug","current","setTimeout","removeMessage"],"sources":["/Users/mike/Desktop/scenic/src/hooks/useTimedMessage.js"],"sourcesContent":["import { useRef, useState, useEffect } from \"react\";\n\n/** Custom hook for managing \"flash\" messages.\n *\n * This adds an item in state, `active`, which can be controlled by the\n * component as desired. The component would typically `setActive(true)`\n * to start displaying the message, and after `timeInMsec`, active would\n * go back to false, which would typically stop showing the message.\n *\n * In the component::\n *\n *   const [myMsgFlag, setMyMsgFlag] = useTimedMessage();\n *\n *   function somethingDidntWork() {\n *     setMsgFlag(true);\n *   }\n *\n *   return (\n *     {myMsgFlag ? <p>Oh No!</p> : null}\n *   )\n *\n * While this hook was written for showing flash messages, it's really just\n * a hook for timed state clearing -- this same pattern could be useful for\n * other tasks.\n *\n */\n\nfunction useTimedMessage(timeInMsec = 3000) {\n  const [active, setActive] = useState(false);\n\n  const messageShownRef = useRef(false);\n\n  useEffect(\n      function showSavedMessage() {\n        console.debug(\n            \"useTimedMessage useEffect showSavedMessage\", \"active=\", active);\n\n        if (active && !messageShownRef.current) {\n          messageShownRef.current = true;\n          setTimeout(function removeMessage() {\n            setActive(false);\n            messageShownRef.current = false;\n          }, timeInMsec);\n        }\n      },\n      [active, timeInMsec],\n  );\n\n  return [active, setActive];\n}\n\nexport default useTimedMessage;\n"],"mappings":"gHAAA,OAASA,MAAM,CAAEC,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAEnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAEA,QAASC,gBAAe,EAAoB,IAAnBC,WAAU,2DAAG,IAAI,CACxC,cAA4BH,QAAQ,CAAC,KAAK,CAAC,wCAApCI,MAAM,eAAEC,SAAS,eAExB,GAAMC,gBAAe,CAAGP,MAAM,CAAC,KAAK,CAAC,CAErCE,SAAS,CACL,QAASM,iBAAgB,EAAG,CAC1BC,OAAO,CAACC,KAAK,CACT,4CAA4C,CAAE,SAAS,CAAEL,MAAM,CAAC,CAEpE,GAAIA,MAAM,EAAI,CAACE,eAAe,CAACI,OAAO,CAAE,CACtCJ,eAAe,CAACI,OAAO,CAAG,IAAI,CAC9BC,UAAU,CAAC,QAASC,cAAa,EAAG,CAClCP,SAAS,CAAC,KAAK,CAAC,CAChBC,eAAe,CAACI,OAAO,CAAG,KAAK,CACjC,CAAC,CAAEP,UAAU,CAAC,CAChB,CACF,CAAC,CACD,CAACC,MAAM,CAAED,UAAU,CAAC,CACvB,CAED,MAAO,CAACC,MAAM,CAAEC,SAAS,CAAC,CAC5B,CAEA,cAAeH,gBAAe"},"metadata":{},"sourceType":"module"}