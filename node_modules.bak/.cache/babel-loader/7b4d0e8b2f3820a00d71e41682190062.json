{"ast":null,"code":"var _jsxFileName = \"/Users/mike/Desktop/scenic/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport useLocalStorage from \"./hooks/useLocalStorage\";\nimport Navigation from \"./routes-nav/Navigation\";\nimport Routes from \"./routes-nav/Routes\";\nimport LoadingSpinner from \"./common/LoadingSpinner\";\nimport BywayApi from \"./api/api\";\nimport UserContext from \"./auth/UserContext\";\nimport jwt from \"jsonwebtoken\";\nimport ScrollToTop from \"./common/ScrollToTop\";\nimport { ToastProvider } from 'react-toast-notifications';\n\n// Key name for storing token in localStorage for \"remember me\" re-login\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const TOKEN_STORAGE_ID = \"scenic-token\";\n\n/** Jobly application.\n *\n * - infoLoaded: has user data been pulled from API?\n *   (this manages spinner for \"loading...\")\n *\n * - currentUser: user obj from API. This becomes the canonical way to tell\n *   if someone is logged in. This is passed around via context throughout app.\n *\n * - token: for logged in users, this is their authentication JWT.\n *   Is required to be set for most API calls. This is initially read from\n *   localStorage and synced to there via the useLocalStorage hook.\n *\n * App -> Routes\n */\n\nfunction App() {\n  _s();\n  const [infoLoaded, setInfoLoaded] = useState(false);\n  const [applicationIds, setApplicationIds] = useState(new Set([]));\n  const [currentUser, setCurrentUser] = useState(null);\n  const [token, setToken] = useLocalStorage(TOKEN_STORAGE_ID);\n  console.debug(\"App\", \"infoLoaded=\", infoLoaded, \"currentUser=\", currentUser, \"token=\", token);\n\n  // Load user info from API. Until a user is logged in and they have a token,\n  // this should not run. It only needs to re-run when a user logs out, so\n  // the value of the token is a dependency for this effect.\n\n  useEffect(function loadUserInfo() {\n    console.debug(\"App useEffect loadUserInfo\", \"token=\", token);\n    async function getCurrentUser() {\n      if (token) {\n        try {\n          let {\n            username\n          } = jwt.decode(token);\n          // put the token on the Api class so it can use it to call the API.\n          BywayApi.token = token;\n          let currentUser = await BywayApi.getCurrentUser(username);\n          setCurrentUser(currentUser);\n        } catch (err) {\n          console.error(\"App loadUserInfo: problem loading\", err);\n          setCurrentUser(null);\n        }\n      }\n      setInfoLoaded(true);\n    }\n\n    // set infoLoaded to false while async getCurrentUser runs; once the\n    // data is fetched (or even if an error happens!), this will be set back\n    // to false to control the spinner.\n    setInfoLoaded(false);\n    getCurrentUser();\n  }, [token]);\n\n  /** Handles site-wide logout. */\n  function logout() {\n    setCurrentUser(null);\n    setToken(null);\n  }\n\n  /** Handles site-wide signup.\n   *\n   * Automatically logs them in (set token) upon signup.\n   *\n   * Make sure you await this function and check its return value!\n   */\n  async function signup(signupData) {\n    try {\n      let token = await BywayApi.signup(signupData);\n      setToken(token);\n      return {\n        success: true\n      };\n    } catch (errors) {\n      console.error(\"signup failed\", errors);\n      return {\n        success: false,\n        errors\n      };\n    }\n  }\n\n  /** Handles site-wide login.\n   *\n   * Make sure you await this function and check its return value!\n   */\n  async function login(loginData) {\n    try {\n      let token = await BywayApi.login(loginData);\n      setToken(token);\n      return {\n        success: true\n      };\n    } catch (errors) {\n      console.error(\"login failed\", errors);\n      return {\n        success: false,\n        errors\n      };\n    }\n  }\n\n  /** Checks if a job has been applied for. */\n  function hasAppliedToJob(id) {\n    return applicationIds.has(id);\n  }\n\n  /** Apply to a job: make API call and update set of application IDs. */\n  function applyToJob(id) {\n    if (hasAppliedToJob(id)) return;\n    BywayApi.applyToJob(currentUser.username, id);\n    setApplicationIds(new Set([...applicationIds, id]));\n  }\n  if (!infoLoaded) return /*#__PURE__*/_jsxDEV(LoadingSpinner, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 126,\n    columnNumber: 27\n  }, this);\n  return /*#__PURE__*/_jsxDEV(BrowserRouter, {\n    children: /*#__PURE__*/_jsxDEV(ToastProvider, {\n      children: /*#__PURE__*/_jsxDEV(ScrollToTop, {\n        children: /*#__PURE__*/_jsxDEV(UserContext.Provider, {\n          value: {\n            currentUser,\n            setCurrentUser\n          },\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"App\",\n            children: [/*#__PURE__*/_jsxDEV(Navigation, {\n              logout: logout\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 135,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Routes, {\n              login: login,\n              signup: signup,\n              logout: logout\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 136,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 129,\n    columnNumber: 7\n  }, this);\n}\n_s(App, \"Ng9XeEGleJG0v7XKSnyO4s4IuTM=\", false, function () {\n  return [useLocalStorage];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","BrowserRouter","useLocalStorage","Navigation","Routes","LoadingSpinner","BywayApi","UserContext","jwt","ScrollToTop","ToastProvider","TOKEN_STORAGE_ID","App","infoLoaded","setInfoLoaded","applicationIds","setApplicationIds","Set","currentUser","setCurrentUser","token","setToken","console","debug","loadUserInfo","getCurrentUser","username","decode","err","error","logout","signup","signupData","success","errors","login","loginData","hasAppliedToJob","id","has","applyToJob"],"sources":["/Users/mike/Desktop/scenic/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport useLocalStorage from \"./hooks/useLocalStorage\";\nimport Navigation from \"./routes-nav/Navigation\";\nimport Routes from \"./routes-nav/Routes\";\nimport LoadingSpinner from \"./common/LoadingSpinner\";\nimport BywayApi from \"./api/api\";\nimport UserContext from \"./auth/UserContext\";\nimport jwt from \"jsonwebtoken\";\nimport ScrollToTop from \"./common/ScrollToTop\";\nimport { ToastProvider } from 'react-toast-notifications';\n\n// Key name for storing token in localStorage for \"remember me\" re-login\nexport const TOKEN_STORAGE_ID = \"scenic-token\";\n\n/** Jobly application.\n *\n * - infoLoaded: has user data been pulled from API?\n *   (this manages spinner for \"loading...\")\n *\n * - currentUser: user obj from API. This becomes the canonical way to tell\n *   if someone is logged in. This is passed around via context throughout app.\n *\n * - token: for logged in users, this is their authentication JWT.\n *   Is required to be set for most API calls. This is initially read from\n *   localStorage and synced to there via the useLocalStorage hook.\n *\n * App -> Routes\n */\n\n\nfunction App() {\n  const [infoLoaded, setInfoLoaded] = useState(false);\n  const [applicationIds, setApplicationIds] = useState(new Set([]));\n  const [currentUser, setCurrentUser] = useState(null);\n  const [token, setToken] = useLocalStorage(TOKEN_STORAGE_ID);\n\n  console.debug(\n      \"App\",\n      \"infoLoaded=\", infoLoaded,\n      \"currentUser=\", currentUser,\n      \"token=\", token,\n  );\n\n  // Load user info from API. Until a user is logged in and they have a token,\n  // this should not run. It only needs to re-run when a user logs out, so\n  // the value of the token is a dependency for this effect.\n\n  useEffect(function loadUserInfo() {\n    console.debug(\"App useEffect loadUserInfo\", \"token=\", token);\n\n    async function getCurrentUser() {\n      if (token) {\n        try {\n          let { username } = jwt.decode(token);\n          // put the token on the Api class so it can use it to call the API.\n          BywayApi.token = token;\n          let currentUser = await BywayApi.getCurrentUser(username);\n          setCurrentUser(currentUser);\n          \n        } catch (err) {\n          console.error(\"App loadUserInfo: problem loading\", err);\n          setCurrentUser(null);\n        }\n      }\n      setInfoLoaded(true);\n    }\n\n    // set infoLoaded to false while async getCurrentUser runs; once the\n    // data is fetched (or even if an error happens!), this will be set back\n    // to false to control the spinner.\n    setInfoLoaded(false);\n    getCurrentUser();\n  }, [token]);\n\n  /** Handles site-wide logout. */\n  function logout() {\n    setCurrentUser(null);\n    setToken(null);\n  }\n\n  /** Handles site-wide signup.\n   *\n   * Automatically logs them in (set token) upon signup.\n   *\n   * Make sure you await this function and check its return value!\n   */\n  async function signup(signupData) {\n    try {\n      let token = await BywayApi.signup(signupData);\n      setToken(token);\n      return { success: true };\n    } catch (errors) {\n      console.error(\"signup failed\", errors);\n      return { success: false, errors };\n    }\n  }\n\n  /** Handles site-wide login.\n   *\n   * Make sure you await this function and check its return value!\n   */\n  async function login(loginData) {\n    try {\n      let token = await BywayApi.login(loginData);\n      setToken(token);\n      return { success: true };\n    } catch (errors) {\n      console.error(\"login failed\", errors);\n      return { success: false, errors };\n    }\n  }\n\n  /** Checks if a job has been applied for. */\n  function hasAppliedToJob(id) {\n    return applicationIds.has(id);\n  }\n\n  /** Apply to a job: make API call and update set of application IDs. */\n  function applyToJob(id) {\n    if (hasAppliedToJob(id)) return;\n    BywayApi.applyToJob(currentUser.username, id);\n    setApplicationIds(new Set([...applicationIds, id]));\n  }\n\n  if (!infoLoaded) return <LoadingSpinner />;\n\n  return (\n      <BrowserRouter>\n        <ToastProvider>\n          <ScrollToTop>\n            <UserContext.Provider\n                value={{ currentUser, setCurrentUser }}>\n              <div className=\"App\">\n                <Navigation logout={logout} />\n                <Routes login={login} signup={signup} logout={logout}/>\n              </div>\n            </UserContext.Provider>\n          </ScrollToTop>\n        </ToastProvider>\n      </BrowserRouter>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}