{"ast":null,"code":"import _slicedToArray from\"/Users/mike/Desktop/scenic/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useState,useCallback,useEffect}from\"react\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var LimitedTextArea=function LimitedTextArea(_ref){var value=_ref.value,limit=_ref.limit,onChange=_ref.onChange;var _useState=useState(\"\"),_useState2=_slicedToArray(_useState,2),content=_useState2[0],setContent=_useState2[1];var setFormattedContent=useCallback(function(text){// const limitedContent = text.slice(0, limit)\nvar limitedContent=value.slice(0,limit);setContent(limitedContent);onChange(limitedContent);},[limit,setContent]);// useCallback is used to isolate resource intensive functions so that they won't automatically run on every render; it only runs when one of its dependencies update - I thought useEffects run every time one of its dependencies updates? What's the difference?\nuseEffect(function(){setFormattedContent(value);},[value]);return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"textarea\",{onChange:function onChange(event){return setFormattedContent(event.target.value);},value:content}),/*#__PURE__*/_jsxs(\"p\",{children:[\"Maximum length: \",limit,/*#__PURE__*/_jsx(\"br\",{}),content.length,\"/\",limit]})]});};export default LimitedTextArea;","map":{"version":3,"names":["React","useState","useCallback","useEffect","LimitedTextArea","value","limit","onChange","content","setContent","setFormattedContent","text","limitedContent","slice","event","target","length"],"sources":["/Users/mike/Desktop/scenic/src/common/LimitedTextArea.js"],"sourcesContent":["import React, { useState, useCallback, useEffect } from \"react\";\n\n\nconst LimitedTextArea = ({ value, limit, onChange }) => {\n  const [content, setContent] = useState(\"\");\n\n  const setFormattedContent = useCallback(\n    text => {\n      // const limitedContent = text.slice(0, limit)\n      const limitedContent = value.slice(0, limit)\n      setContent(limitedContent);\n      onChange(limitedContent);\n    },\n    [limit, setContent ]\n  );\n  // useCallback is used to isolate resource intensive functions so that they won't automatically run on every render; it only runs when one of its dependencies update - I thought useEffects run every time one of its dependencies updates? What's the difference?\n\n  useEffect(() => {\n    setFormattedContent(value)\n  }, [value])\n\n  return (\n    <div>\n      <textarea\n        onChange={event => setFormattedContent(event.target.value)}\n        value={content}\n      />\n      <p>\n        Maximum length: {limit}<br></br>\n        {content.length}/{limit}\n      </p>\n    </div>\n  );\n}\n\nexport default LimitedTextArea;"],"mappings":"gHAAA,MAAOA,MAAK,EAAIC,QAAQ,CAAEC,WAAW,CAAEC,SAAS,KAAQ,OAAO,CAAC,wFAGhE,GAAMC,gBAAe,CAAG,QAAlBA,gBAAe,MAAmC,IAA7BC,MAAK,MAALA,KAAK,CAAEC,KAAK,MAALA,KAAK,CAAEC,QAAQ,MAARA,QAAQ,CAC/C,cAA8BN,QAAQ,CAAC,EAAE,CAAC,wCAAnCO,OAAO,eAAEC,UAAU,eAE1B,GAAMC,oBAAmB,CAAGR,WAAW,CACrC,SAAAS,IAAI,CAAI,CACN;AACA,GAAMC,eAAc,CAAGP,KAAK,CAACQ,KAAK,CAAC,CAAC,CAAEP,KAAK,CAAC,CAC5CG,UAAU,CAACG,cAAc,CAAC,CAC1BL,QAAQ,CAACK,cAAc,CAAC,CAC1B,CAAC,CACD,CAACN,KAAK,CAAEG,UAAU,CAAE,CACrB,CACD;AAEAN,SAAS,CAAC,UAAM,CACdO,mBAAmB,CAACL,KAAK,CAAC,CAC5B,CAAC,CAAE,CAACA,KAAK,CAAC,CAAC,CAEX,mBACE,oCACE,iBACE,QAAQ,CAAE,kBAAAS,KAAK,QAAIJ,oBAAmB,CAACI,KAAK,CAACC,MAAM,CAACV,KAAK,CAAC,EAAC,CAC3D,KAAK,CAAEG,OAAQ,EACf,cACF,qBAAG,kBACe,CAACF,KAAK,cAAC,aAAS,CAC/BE,OAAO,CAACQ,MAAM,CAAC,GAAC,CAACV,KAAK,GACrB,GACA,CAEV,CAAC,CAED,cAAeF,gBAAe"},"metadata":{},"sourceType":"module"}