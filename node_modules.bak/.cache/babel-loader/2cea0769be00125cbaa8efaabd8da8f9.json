{"ast":null,"code":"var _jsxFileName = \"/Users/mike/Desktop/scenic/src/search/geoFeaturesSearch.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport Checkbox from \"./Checkbox\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction GeographicFeaturesSearch(_ref) {\n  _s();\n  let {\n    onChange\n  } = _ref;\n  const categories = ['canyon', 'coastline', 'desert', 'forest', 'grasslands', 'lake', 'mountains', 'swamp', 'river', 'urban'];\n  const [selected, setSelected] = useState([]);\n  // didn't work properly without doing the useState and useEffect and changeHandler here and instead doing it in the SearchForm component where it's called\n\n  useEffect(() => {\n    onChange(selected);\n  }, [selected]);\n  const changeHandler = props => {\n    if (props.checked) {\n      const index = selected.indexOf(props.value);\n      if (index > -1) {\n        selected.splice(index, 1);\n        setSelected(selected);\n      } else {\n        selected.push(props.value);\n        setSelected(selected);\n      }\n      // this is creating an array, checking to be sure that what's selected isn't already in the array then adding\n      // this is used in SearchForm so that's where the value prop is given - value={geoFeaturesSelect}\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: categories.map(c => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"single-checkbox\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: c,\n        children: c\n      }, c, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Checkbox, {\n        onChange: changeHandler,\n        name: c\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 9\n  }, this);\n}\n_s(GeographicFeaturesSearch, \"239Ve9yO4iC/9vfIgHzDkghA5LI=\");\n_c = GeographicFeaturesSearch;\nexport default GeographicFeaturesSearch;\nvar _c;\n$RefreshReg$(_c, \"GeographicFeaturesSearch\");","map":{"version":3,"names":["React","useEffect","useState","Checkbox","GeographicFeaturesSearch","onChange","categories","selected","setSelected","changeHandler","props","checked","index","indexOf","value","splice","push","map","c"],"sources":["/Users/mike/Desktop/scenic/src/search/geoFeaturesSearch.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport Checkbox from \"./Checkbox\";\n\nfunction GeographicFeaturesSearch({ onChange }) {\n    const categories = [ 'canyon', 'coastline', 'desert', 'forest', 'grasslands', 'lake', 'mountains', 'swamp', 'river', 'urban'];\n    const [selected, setSelected] = useState([]);\n    // didn't work properly without doing the useState and useEffect and changeHandler here and instead doing it in the SearchForm component where it's called\n        \n    useEffect(() => {\n        onChange(selected)\n    }, [selected]);\n\n    const changeHandler = (props) => {\n        if (props.checked) {\n            const index = selected.indexOf(props.value)\n            if (index > -1) {\n                selected.splice(index, 1)\n                setSelected(selected)\n            } else {\n                selected.push(props.value);\n                setSelected(selected)\n            }\n            // this is creating an array, checking to be sure that what's selected isn't already in the array then adding\n            // this is used in SearchForm so that's where the value prop is given - value={geoFeaturesSelect}\n            \n        }\n    }\n    return (\n        <div>\n            {categories.map(c => (\n                <div className=\"single-checkbox\">\n                    <label key={c} htmlFor={c}>{c}</label>\n                    <Checkbox onChange={changeHandler} name={c}/>\n                </div>\n            ))\n    \n            }\n        </div>\n    )\n}\n \n\nexport default GeographicFeaturesSearch;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,QAAQ,MAAM,YAAY;AAAC;AAElC,SAASC,wBAAwB,OAAe;EAAA;EAAA,IAAd;IAAEC;EAAS,CAAC;EAC1C,MAAMC,UAAU,GAAG,CAAE,QAAQ,EAAE,WAAW,EAAE,QAAQ,EAAE,QAAQ,EAAE,YAAY,EAAE,MAAM,EAAE,WAAW,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,CAAC;EAC7H,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EAC5C;;EAEAD,SAAS,CAAC,MAAM;IACZI,QAAQ,CAACE,QAAQ,CAAC;EACtB,CAAC,EAAE,CAACA,QAAQ,CAAC,CAAC;EAEd,MAAME,aAAa,GAAIC,KAAK,IAAK;IAC7B,IAAIA,KAAK,CAACC,OAAO,EAAE;MACf,MAAMC,KAAK,GAAGL,QAAQ,CAACM,OAAO,CAACH,KAAK,CAACI,KAAK,CAAC;MAC3C,IAAIF,KAAK,GAAG,CAAC,CAAC,EAAE;QACZL,QAAQ,CAACQ,MAAM,CAACH,KAAK,EAAE,CAAC,CAAC;QACzBJ,WAAW,CAACD,QAAQ,CAAC;MACzB,CAAC,MAAM;QACHA,QAAQ,CAACS,IAAI,CAACN,KAAK,CAACI,KAAK,CAAC;QAC1BN,WAAW,CAACD,QAAQ,CAAC;MACzB;MACA;MACA;IAEJ;EACJ,CAAC;;EACD,oBACI;IAAA,UACKD,UAAU,CAACW,GAAG,CAACC,CAAC,iBACb;MAAK,SAAS,EAAC,iBAAiB;MAAA,wBAC5B;QAAe,OAAO,EAAEA,CAAE;QAAA,UAAEA;MAAC,GAAjBA,CAAC;QAAA;QAAA;QAAA;MAAA,QAAyB,eACtC,QAAC,QAAQ;QAAC,QAAQ,EAAET,aAAc;QAAC,IAAI,EAAES;MAAE;QAAA;QAAA;QAAA;MAAA,QAAE;IAAA;MAAA;MAAA;MAAA;IAAA,QAEpD;EAAC;IAAA;IAAA;IAAA;EAAA,QAGA;AAEd;AAAC,GApCQd,wBAAwB;AAAA,KAAxBA,wBAAwB;AAuCjC,eAAeA,wBAAwB;AAAC;AAAA"},"metadata":{},"sourceType":"module"}